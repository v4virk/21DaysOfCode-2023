Q1. 
#include <stdio.h>
#include <stdlib.h>
int main() {
    int rows, cols;
    int **arr; 
    int i, j, sum = 0;
    printf("Enter the number of rows: ");
    scanf("%d", &rows);
    printf("Enter the number of columns: ");
    scanf("%d", &cols);
    arr = (int **)malloc(rows * sizeof(int *));
    if (arr == NULL) {
        printf("Memory allocation failed!");
        return 1;
    }
    for (i = 0; i < rows; i++) {
        arr[i] = (int *)malloc(cols * sizeof(int));
        if (arr[i] == NULL) {
            printf("Memory allocation failed!");
            return 1;
        }
    }
    printf("Enter the elements:\n");
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            scanf("%d", &arr[i][j]);
        }
    }
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            sum += arr[i][j];
        }
    }
    printf("Sum of all elements: %d\n", sum);
    for (i = 0; i < rows; i++) {
        free(arr[i]);
    }
    free(arr);
    return 0;
}
Q2. 
#include <stdio.h>
#include <stdlib.h>
void matrixmul(int **mat1, int **mat2, int **result, int rows1, int columns1, int columns2) {
    int i, j, k;
    for (i = 0; i < rows1; i++) {
        for (j = 0; j < columns2; j++) {
            result[i][j] = 0;
            for (k = 0; k < columns1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}
void printmatrix(int **matrix, int rows, int columns) {
    int i, j;
    for (i = 0; i < rows; i++) {
        for (j = 0; j < columns; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}
int main() {
    int rows1, columns1, rows2, columns2;
    int **mat1, **mat2, **result;
    int i, j;
    printf("Enter the number of rows for matrix 1: ");
    scanf("%d", &rows1);
    printf("Enter the number of columns for matrix 1: ");
    scanf("%d", &columns1);
    printf("Enter the number of rows for matrix 2: ");
    scanf("%d", &rows2);
    printf("Enter the number of columns for matrix 2: ");
    scanf("%d", &columns2);
    if (columns1 != rows2) {
        printf("Matrix multiplication is not possible with the given dimensions.\n");
        return 1;
    }
    mat1 = (int **)malloc(rows1 * sizeof(int *));
    for (i = 0; i < rows1; i++) {
        mat1[i] = (int *)malloc(columns1 * sizeof(int));
    }
    mat2 = (int **)malloc(rows2 * sizeof(int *));
    for (i = 0; i < rows2; i++) {
        mat2[i] = (int *)malloc(columns2 * sizeof(int));
    }
    result = (int **)malloc(rows1 * sizeof(int *));
    for (i = 0; i < rows1; i++) {
        result[i] = (int *)malloc(columns2 * sizeof(int));
    }
    printf("Enter the elements of matrix 1:\n");
    for (i = 0; i < rows1; i++) {
        for (j = 0; j < columns1; j++) {
            scanf("%d", &mat1[i][j]);
        }
    }
    printf("Enter the elements of matrix 2:\n");
    for (i = 0; i < rows2; i++) {
        for (j = 0; j < columns2; j++) {
            scanf("%d", &mat2[i][j]);
        }
    }
    matrixmul(mat1, mat2, result, rows1, columns1, columns2);
    printf("Matrix 1:\n");
    printMatrix(mat1, rows1, columns1);
    printf("Matrix 2:\n");
    printMatrix(mat2, rows2, columns2);
    printf("Result:\n");
    printMatrix(result, rows1, columns2);
    for (i = 0; i < rows1; i++) {
        free(mat1[i]);
    }
    free(mat1);
    for (i = 0; i < rows2; i++) {
        free(mat2[i]);
    }
    free(mat2);
    for (i = 0; i < rows1; i++) {
        free(result[i]);
    }
    free(result);
    return 0;
}
